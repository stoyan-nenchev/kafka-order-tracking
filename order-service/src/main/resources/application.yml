server:
  port: 8081

spring:
  application:
    name: order-service
  
  datasource:
    url: jdbc:postgresql://localhost:5432/orderdb
    username: orderuser
    password: orderpass123
    driver-class-name: org.postgresql.Driver
    
  jpa:
    hibernate:
      ddl-auto: validate
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: false
    
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: order-service-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.portfolio.shared.events"

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when-authorized

logging:
  level:
    com.portfolio.orderservice: INFO
    org.springframework.kafka: WARN

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      order-creation:
        sliding-window-size: 20
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
      order-retrieval:
        sliding-window-size: 10
        minimum-number-of-calls: 3
        failure-rate-threshold: 60
        wait-duration-in-open-state: 15s
        permitted-number-of-calls-in-half-open-state: 2
      order-listing:
        sliding-window-size: 15
        minimum-number-of-calls: 5
        failure-rate-threshold: 70
        wait-duration-in-open-state: 20s
      order-update:
        sliding-window-size: 10
        minimum-number-of-calls: 3
        failure-rate-threshold: 50
        wait-duration-in-open-state: 25s
        
  retry:
    instances:
      order-creation:
        max-attempts: 3
        wait-duration: 500ms
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - org.springframework.dao.DataAccessException
          - java.util.concurrent.TimeoutException
      order-retrieval:
        max-attempts: 2
        wait-duration: 200ms
        exponential-backoff-multiplier: 1.5
      order-update:
        max-attempts: 3
        wait-duration: 300ms
        exponential-backoff-multiplier: 2
        
  timelimiter:
    instances:
      order-creation:
        timeout-duration: 5s
      order-retrieval:
        timeout-duration: 3s
      order-listing:
        timeout-duration: 10s
      order-update:
        timeout-duration: 4s
    
---
spring:
  config:
    activate:
      on-profile: docker
      
  datasource:
    url: jdbc:postgresql://postgres-order:5432/orderdb
    
  kafka:
    bootstrap-servers: kafka-controller:29092,kafka-broker1:29092,kafka-broker2:29092